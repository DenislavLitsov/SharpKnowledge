// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SharpKnowledge.Data;

#nullable disable

namespace SharpKnowledge.Data.Migrations
{
    [DbContext(typeof(PostgreContext))]
    [Migration("20250928123910_FixWeights")]
    partial class FixWeights
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SharpKnowledge.Data.Models.Bias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<float[]>("Biases")
                        .IsRequired()
                        .HasColumnType("real[]");

                    b.Property<Guid>("BrainModelId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BrainModelId");

                    b.ToTable("Bias");
                });

            modelBuilder.Entity("SharpKnowledge.Data.Models.BrainModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("BestScore")
                        .HasColumnType("real");

                    b.Property<string>("BrainType")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Generation")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("TotalRuns")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("BrainModels");
                });

            modelBuilder.Entity("SharpKnowledge.Data.Models.Weight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("BrainModelId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BrainModelId");

                    b.ToTable("Weight");
                });

            modelBuilder.Entity("SharpKnowledge.Data.Models.WeightCol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<float[]>("WeightData")
                        .IsRequired()
                        .HasColumnType("real[]");

                    b.Property<int>("WeightId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WeightId");

                    b.ToTable("WeightCol");
                });

            modelBuilder.Entity("SharpKnowledge.Data.Models.Bias", b =>
                {
                    b.HasOne("SharpKnowledge.Data.Models.BrainModel", null)
                        .WithMany("BiasesData")
                        .HasForeignKey("BrainModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SharpKnowledge.Data.Models.Weight", b =>
                {
                    b.HasOne("SharpKnowledge.Data.Models.BrainModel", null)
                        .WithMany("WeightsData")
                        .HasForeignKey("BrainModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SharpKnowledge.Data.Models.WeightCol", b =>
                {
                    b.HasOne("SharpKnowledge.Data.Models.Weight", null)
                        .WithMany("WeightData")
                        .HasForeignKey("WeightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SharpKnowledge.Data.Models.BrainModel", b =>
                {
                    b.Navigation("BiasesData");

                    b.Navigation("WeightsData");
                });

            modelBuilder.Entity("SharpKnowledge.Data.Models.Weight", b =>
                {
                    b.Navigation("WeightData");
                });
#pragma warning restore 612, 618
        }
    }
}
